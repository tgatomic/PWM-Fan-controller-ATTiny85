
PWM_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000019a  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000105  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000214  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c0  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	87 c0       	rjmp	.+270    	; 0x112 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a3 36       	cpi	r26, 0x63	; 99
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	7d c0       	rjmp	.+250    	; 0x138 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
#define FALSE 0

int main(void)
{
    /* Initiate the PWM timer */
    DDRB |= (1<<PB0) | (1<<PB4);;
  40:	87 b3       	in	r24, 0x17	; 23
  42:	81 61       	ori	r24, 0x11	; 17
  44:	87 bb       	out	0x17, r24	; 23
    TCCR0A |= (1 << FOC0A) | (1 << WGM01) | (1 << WGM00);
  46:	8a b5       	in	r24, 0x2a	; 42
  48:	83 68       	ori	r24, 0x83	; 131
  4a:	8a bd       	out	0x2a, r24	; 42
    TCCR0B |= 1 << CS00;
  4c:	83 b7       	in	r24, 0x33	; 51
  4e:	81 60       	ori	r24, 0x01	; 1
  50:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0;
  52:	12 be       	out	0x32, r1	; 50
    OCR0A = 0;
  54:	19 bc       	out	0x29, r1	; 41

    /* Initiate the interrupt */
    MCUCR |= (1<<ISC01) | (1<<ISC00);     // Set the interrupt to rising edge
  56:	85 b7       	in	r24, 0x35	; 53
  58:	83 60       	ori	r24, 0x03	; 3
  5a:	85 bf       	out	0x35, r24	; 53

    GIMSK |= (1<<INT0); // Enable the interrupt
  5c:	8b b7       	in	r24, 0x3b	; 59
  5e:	80 64       	ori	r24, 0x40	; 64
  60:	8b bf       	out	0x3b, r24	; 59
    sei();              // Enable global interrupt
  62:	78 94       	sei

    /* Set variables */
    button_pressed = FALSE;
  64:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
    step = 1; // 1 so we end upp in case 1 first buttonpress
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <step>

    /* Initiate fan */
    OCR0A = 100;
  6e:	84 e6       	ldi	r24, 0x64	; 100
  70:	89 bd       	out	0x29, r24	; 41
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f e7       	ldi	r18, 0x7F	; 127
  74:	6a e1       	ldi	r22, 0x1A	; 26
  76:	76 e0       	ldi	r23, 0x06	; 6
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	60 40       	sbci	r22, 0x00	; 0
  7c:	70 40       	sbci	r23, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <main+0x38>
  80:	00 c0       	rjmp	.+0      	; 0x82 <main+0x42>
  82:	00 00       	nop
    _delay_ms(250);
    OCR0A = 40;
  84:	88 e2       	ldi	r24, 0x28	; 40
  86:	89 bd       	out	0x29, r24	; 41
                case 1:
                    OCR0A = 100;
                    step++;
                    break;
                case 2:
                    OCR0A = 150;
  88:	56 e9       	ldi	r21, 0x96	; 150
                    step++;
                    break;
                case 3:
                    OCR0A = 200;
  8a:	48 ec       	ldi	r20, 0xC8	; 200
                    step++;
                    break;
                case 4:
                    OCR0A = 250;
  8c:	3a ef       	ldi	r19, 0xFA	; 250
        if (button_pressed){

            switch (step)
            {
                case 0:
                    OCR0A = 40;
  8e:	28 e2       	ldi	r18, 0x28	; 40
                    step++;
                    PORTB &= ~(1<<PB4);
                    break;
                case 1:
                    OCR0A = 100;
  90:	94 e6       	ldi	r25, 0x64	; 100
    _delay_ms(250);
    OCR0A = 40;

    while (1) 
    {
        if (button_pressed){
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  96:	88 23       	and	r24, r24
  98:	e1 f3       	breq	.-8      	; 0x92 <main+0x52>

            switch (step)
  9a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <step>
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	d1 f0       	breq	.+52     	; 0xd6 <main+0x96>
  a2:	28 f4       	brcc	.+10     	; 0xae <main+0x6e>
  a4:	88 23       	and	r24, r24
  a6:	41 f0       	breq	.+16     	; 0xb8 <main+0x78>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	71 f0       	breq	.+28     	; 0xc8 <main+0x88>
  ac:	26 c0       	rjmp	.+76     	; 0xfa <main+0xba>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	c9 f0       	breq	.+50     	; 0xe4 <main+0xa4>
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	f1 f0       	breq	.+60     	; 0xf2 <main+0xb2>
  b6:	21 c0       	rjmp	.+66     	; 0xfa <main+0xba>
            {
                case 0:
                    OCR0A = 40;
  b8:	29 bd       	out	0x29, r18	; 41
                    step++;
  ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <step>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <step>
                    PORTB &= ~(1<<PB4);
  c4:	c4 98       	cbi	0x18, 4	; 24
                    break;
  c6:	19 c0       	rjmp	.+50     	; 0xfa <main+0xba>
                case 1:
                    OCR0A = 100;
  c8:	99 bd       	out	0x29, r25	; 41
                    step++;
  ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <step>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <step>
                    break;
  d4:	12 c0       	rjmp	.+36     	; 0xfa <main+0xba>
                case 2:
                    OCR0A = 150;
  d6:	59 bd       	out	0x29, r21	; 41
                    step++;
  d8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <step>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <step>
                    break;
  e2:	0b c0       	rjmp	.+22     	; 0xfa <main+0xba>
                case 3:
                    OCR0A = 200;
  e4:	49 bd       	out	0x29, r20	; 41
                    step++;
  e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <step>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <step>
                    break;
  f0:	04 c0       	rjmp	.+8      	; 0xfa <main+0xba>
                case 4:
                    OCR0A = 250;
  f2:	39 bd       	out	0x29, r19	; 41
                    step = 0;
  f4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <step>
                    PORTB |= (1<<PB4);
  f8:	c4 9a       	sbi	0x18, 4	; 24
  fa:	8f e7       	ldi	r24, 0x7F	; 127
  fc:	6a e1       	ldi	r22, 0x1A	; 26
  fe:	76 e0       	ldi	r23, 0x06	; 6
 100:	81 50       	subi	r24, 0x01	; 1
 102:	60 40       	sbci	r22, 0x00	; 0
 104:	70 40       	sbci	r23, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0xc0>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0xca>
 10a:	00 00       	nop
                    break;
            }
            _delay_ms(250);
            button_pressed = FALSE;
 10c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 110:	c0 cf       	rjmp	.-128    	; 0x92 <main+0x52>

00000112 <__vector_1>:
        }
    }
}

ISR(INT0_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
    if (button_pressed == FALSE)
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 122:	81 11       	cpse	r24, r1
 124:	03 c0       	rjmp	.+6      	; 0x12c <__vector_1+0x1a>
    {
        button_pressed = TRUE;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
    }
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
